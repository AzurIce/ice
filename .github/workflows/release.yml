name: Release

on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]a+(-alpha|-beta)?'
    branches: ["ci/release-*"]
  # to test the workflow
  pull_request:
    paths:
    - '.github/workflows/release.yml'

permissions: 
  contents: write

env:
  # Preview mode: Publishes the build output as a CI artifact instead of creating
  # a release, allowing for manual inspection of the output. This mode is
  # activated if the CI run was triggered by events other than pushed tags
  preview: ${{ !startsWith(github.ref, 'refs/tags/') }}
  pre-release: ${{ !endsWith(github.ref, 'alpha|beta') }}
  version: dev

jobs:
  changelog:
    name: Update changelog
    runs-on: ubuntu-22.04
    outputs: 
      release_body: ${{ steps.git-cliff.outputs.content }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Generate changelog
        uses: orhun/git-cliff-action@v3
        id: git-cliff
        with:
          args: -vv --latest --no-exec --strip header
        env:
          OUTPUT: CHANGES.md
          GITHUB_REPO: ${{ github.repository }}
  build-binaries:
    name: Build binaries
    strategy:
      fail-fast: false
      matrix:
        build: [x86_64-linux, x86_64-windows, aarch64-macos]
        include:
          - build: x86_64-linux
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - build: x86_64-windows
            os: windows-latest
            target: x86_64-pc-windows-msvc
          - build: aarch64-macos
            os: macos-latest
            target: aarch64-apple-darwin
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
      - name: Initialize version
        shell: bash
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          fi
      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          target: ${{ matrix.target }}

      - uses: Swatinem/rust-cache@v2
      
      # - name: install dependencies (ubuntu only)
      #   if: matrix.os == 'ubuntu-latest'
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install \
      #       build-essential \
      #       git \
      #       pkg-config \
      #       libdbus-1-dev \
      #       libudev-dev \
      #       libxkbcommon-dev \
      #       libfontconfig1-dev \
      #       libgtk-3-dev \
      #       libwebkit2gtk-4.0-dev \
      #       libssl-dev \
      #       libayatana-appindicator3-dev \
      #       librsvg2-dev \
      #       librust-atk-dev \
      #       libatk1.0-dev
      
      - name: Build binaries
        run: cargo build --release --locked -p  --target ${{ matrix.target }}
      
      - name: Copy binaries
        shell: bash
        run: |
          mkdir -p dist
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cp "target/${{ matrix.target }}/release/ice.exe" "dist/ice.exe"
          else
            cp "target/${{ matrix.target }}/release/ice" "dist/ice"
          fi
      
      - uses: actions/upload-artifact@v4
        with:
          name: bin-${{ env.version }}-${{ matrix.build }}
          path: dist
  release:
    name: Release
    needs: [build-binaries, changelog]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
      - name: Initialize version
        shell: bash
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          fi

      - uses: actions/download-artifact@v4
      
      - name: Build archive
        shell: bash
        run: |
          set -ex

          source="$(pwd)"
          cd "$(mktemp -d)"
          mkdir dist

          for dir in bins-* ; do
              platform=${dir#"bins-"}
              if [[ $platform =~ "windows" ]]; then
                  exe=".exe"
              fi
              pkgname=ice-$GITHUB_REF_NAME-$platform
              mkdir -p $pkgname
              cp $source/LICENSE $source/README.md $pkgname
              mv bins-$platform/ice$exe $pkgname
              chmod +x $pkgname/ice$exe

              if [ "$exe" = "" ]; then
                  tar cJf dist/$pkgname.tar.xz $pkgname
              else
                  7z a -r dist/$pkgname.zip $pkgname
              fi
          done

          mv dist $source/

      - name: Copy binaries
        run: |
          mkdir -p dist
          cp -r bin-*/* dist/

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        if: env.preview == 'false'
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: dist/*
          file_glob: true
          tag: ${{ github.ref_name }}
          release_name: "Release v${{ env.version }}"
          body: "${{ needs.changelog.outputs.release_body }}"
          overwrite: true
      - name: Upload binaries as artifact
        uses: actions/upload-artifact@v4
        if: env.preview == 'true'
        with:
          name: release
          path: dist/*